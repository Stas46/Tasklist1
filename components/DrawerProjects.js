// components/DrawerProjects.js
import React, { useCallback } from 'react';
import { View, Text, StyleSheet, Pressable, FlatList, Platform, Alert } from 'react-native';
import { useTasks } from '../store/useTasks';

export default function DrawerProjects({ navigation }) {
  const projects = useTasks((s) => s.projects);
  const currentId = useTasks((s) => s.selectedProjectId);
  const setSelectedProject = useTasks((s) => s.setSelectedProject);
  const addProject = useTasks((s) => s.addProject);
  const renameProject = useTasks((s) => s.renameProject);
  const deleteProject = useTasks((s) => s.deleteProject);

  const handleSelect = useCallback((id) => {
    setSelectedProject(id);
    navigation?.closeDrawer?.();
  }, [setSelectedProject, navigation]);

  const askNewProject = useCallback(() => {
    if (Platform.OS === 'web') {
      const name = window.prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞');
      if (name && name.trim()) addProject(name.trim());
    } else {
      Alert.prompt?.('–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç', undefined, (text) => {
        if (text && text.trim()) addProject(text.trim());
      });
    }
  }, [addProject]);

  const askRename = useCallback((p) => {
    if (p.id === 'all' || p.id === 'inbox') return; // —Å–∏—Å—Ç–µ–º–Ω—ã–µ
    if (Platform.OS === 'web') {
      const name = window.prompt('–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', p.name);
      if (name && name.trim()) renameProject(p.id, name.trim());
    } else {
      Alert.prompt?.('–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', undefined, (text) => {
        if (text && text.trim()) renameProject(p.id, text.trim());
      }, undefined, p.name);
    }
  }, [renameProject]);

  const askDelete = useCallback((p) => {
    if (p.id === 'all' || p.id === 'inbox') return;
    if (Platform.OS === 'web') {
      if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç ¬´${p.name}¬ª? –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤–æ ¬´–í—Ö–æ–¥—è—â–∏–µ¬ª.`)) {
        deleteProject(p.id);
      }
    } else {
      Alert.alert('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', `–ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤–æ ¬´–í—Ö–æ–¥—è—â–∏–µ¬ª.`, [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        { text: '–£–¥–∞–ª–∏—Ç—å', style: 'destructive', onPress: () => deleteProject(p.id) },
      ]);
    }
  }, [deleteProject]);

  const renderItem = ({ item }) => {
    const active = item.id === currentId;
    return (
      <View style={styles.row}>
        <Pressable
          onPress={() => handleSelect(item.id)}
          style={({ pressed }) => [styles.item, active && styles.itemActive, pressed && { opacity: 0.85 }]}
          hitSlop={6}
        >
          <Text style={styles.emoji}>{item.emoji ?? 'üìÅ'}</Text>
          <Text style={[styles.title, active && styles.titleActive]}>{item.name}</Text>
        </Pressable>

        {/* –∫–Ω–æ–ø–∫–∞ ¬´‚ãØ¬ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
        {item.id !== 'all' && item.id !== 'inbox' && (
          <Pressable
            onPress={() => askRename(item)}
            onLongPress={() => askDelete(item)}
            hitSlop={6}
            style={({ pressed }) => [styles.kebab, pressed && { opacity: 0.7 }]}
          >
            <Text style={styles.kebabText}>‚ãØ</Text>
          </Pressable>
        )}
      </View>
    );
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>–ü—Ä–æ–µ–∫—Ç—ã</Text>

      <Pressable onPress={askNewProject} style={({ pressed }) => [styles.addBtn, pressed && { opacity: 0.8 }]}>
        <Text style={styles.addIcon}>Ôºã</Text>
        <Text style={styles.addText}>–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç</Text>
      </Pressable>

      <FlatList
        data={projects}
        keyExtractor={(p) => p.id}
        renderItem={renderItem}
        contentContainerStyle={{ paddingVertical: 8 }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, paddingTop: 16, paddingHorizontal: 12, backgroundColor: '#fff' },
  header: { fontSize: 16, fontWeight: '700', color: '#111', marginBottom: 8 },

  addBtn: {
    alignSelf: 'flex-start',
    flexDirection: 'row', alignItems: 'center',
    backgroundColor: '#F2F3F5',
    borderRadius: 12, paddingVertical: 8, paddingHorizontal: 10,
    marginBottom: 8,
  },
  addIcon: { fontSize: 16, marginRight: 6, color: '#111' },
  addText: { fontSize: 14, color: '#111', fontWeight: '700' },

  row: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' },
  item: {
    flexDirection: 'row', alignItems: 'center',
    borderRadius: 12, paddingVertical: 10, paddingHorizontal: 10, marginVertical: 4,
    flex: 1,
  },
  itemActive: { backgroundColor: '#F2F3F5' },
  emoji: { fontSize: 16, marginRight: 8 },
  title: { fontSize: 14, color: '#333', fontWeight: '600' },
  titleActive: { color: '#111' },

  kebab: { padding: 8, marginLeft: 6, borderRadius: 8 },
  kebabText: { fontSize: 18, color: '#666', lineHeight: 18 },
});
